using NUnit.Framework;
using System.Collections.Generic;
using System.Drawing;
using System.IO;

using Karamba.CrossSections;
using Karamba.Geometry;
using Karamba.Elements;
using Karamba.Loads;
using Karamba.Supports;
using Karamba.Utilities;

namespace KarambaCommon.Tests.Algorithms
{
    [TestFixture]
    public class Buckling_tests
    {
#if ALL_TESTS
        [Test]
        public void Column()
        {
            var k3d = new Toolkit();
            var logger = new MessageLogger();
            double length = 4.0;
            var p0 = new Point3(0, 0, 0);
            var p1 = new Point3(0, 0, length);
            var axis = new Line3(p0, p1);

            var resourcePath = @"";

            // get a material from the material table in the folder 'Resources'
            var materialPath = Path.Combine(resourcePath, "Materials/MaterialProperties.csv");
            var inMaterials = k3d.Material.ReadMaterialTable(materialPath);
            var material = inMaterials.Find(x => x.name == "Steel");

            // get a cross section from the cross section table in the folder 'Resources'
            var crosecPath = Path.Combine(resourcePath, "CrossSections/CrossSectionValues.bin");
            CroSecTable inCroSecs = k3d.CroSec.ReadCrossSectionTable(crosecPath, out var info);
            var crosec_family = inCroSecs.crosecs.FindAll(x => x.family == "FRQ");
            var crosec_initial = crosec_family.Find(x => x.name == "FRQ45/5");

            // attach the material to the cross section
            crosec_initial.setMaterial(material);

            // create the column
            var beams = k3d.Part.LineToBeam(new List<Line3> {axis}, new List<string>(){ "B1" }, new List<CroSec>() { crosec_initial }, logger,
                out var out_points);

            // create supports
            var supports = new List<Support>();
            supports.Add(k3d.Support.Support(p0, new List<bool>() {true, true, true, false, false, true}));
            supports.Add(k3d.Support.Support(p1, new List<bool>() {true, true, false, false, false, false}));

            // create a Point-load
            var loads = new List<Load>
            {
                k3d.Load.PointLoad(p1, new Vector3(0, 0, -100))
            };

            // create the model
            var model = k3d.Model.AssembleModel(beams, supports, loads, 
                out info, out var mass, out var cog, out var message, out var warning);

            // calculate Th.I response
            model = k3d.Algorithms.AnalyzeThI(model, out var out_max_disp, out var out_g, out var out_comp, out message);

            // optimize the cross section
            model = k3d.Algorithms.OptiCroSec(model, crosec_family,
                out var maxDisplacements, out var compliances, out message);

            // disassemble the model
            k3d.Model.Disassemble(model, logger, out var points, out var lines, out var meshes, out beams, out var shells,
                out supports, out loads, out var materials, out var crosecs, out var joints);

            // check the buckling length,; a negative value means that the length was autogenerated
            Assert.AreEqual(beams[0].BucklingLength(BuilderElementStraightLine.BucklingDir.bklY), -length, 1E-10);
            // check the resulting cross section
            Assert.AreEqual(beams[0].BucklingLength(BuilderElementStraightLine.BucklingDir.bklY), -length, 1E-10);
            Assert.AreEqual(beams[0].crosec.name, "FRQ70/6");
        }
#endif
    }
}
